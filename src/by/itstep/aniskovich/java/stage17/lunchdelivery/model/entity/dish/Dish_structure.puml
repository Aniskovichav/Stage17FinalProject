@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 999,
    "backwardDepth": 0,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": false,
    "hideInterfaceCalls": false, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 5,
    "showDetailedClassStructure": true
  },
  "rootClass": "by.itstep.aniskovich.java.stage17.lunchdelivery.model.entity.dish.Dish",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1178237321 { 
   	label=itstep
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_1690025366 { 
   	label=aniskovich
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   subgraph cluster_649106214 { 
   	label=java
	labeljust=l
	fillcolor="#c4c4c4"
	style=filled
   
   subgraph cluster_34464036 { 
   	label=stage17
	labeljust=l
	fillcolor="#bababa"
	style=filled
   
   subgraph cluster_911490444 { 
   	label=lunchdelivery
	labeljust=l
	fillcolor="#b0b0b0"
	style=filled
   
   AbstractDish412758549[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)AbstractDish</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   dishId: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   ingredients: List&lt;Product&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   price: double [1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Appetizer412758549[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Appetizer</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Dish412758549[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(I)Dish</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ getCalories(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getCarbs(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getFat(): double</TD></TR>
<TR><TD ALIGN="LEFT" >+ getIngredients(): List&lt;Product&gt;</TD></TR>
<TR><TD ALIGN="LEFT" >+ getName(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ getProtein(): double</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#F1E5FD"
];

Extra412758549[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Extra</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Garnish412758549[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Garnish</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

MainCourse412758549[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)MainCourse</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Product1982328172[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Product</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   basePrice: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   calories: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   carbs: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   fat: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   name: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   protein: double [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   quantity: double [1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Salad412758549[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Salad</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   isVeg: boolean [1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Soup412758549[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Soup</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

VegMainCourse412758549[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)VegMainCourse</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   isVeg: boolean [1]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 
} 
} 
} 

'edges    
AbstractDish412758549 -> Appetizer412758549[arrowhead=none, arrowtail=empty, dir=both];
AbstractDish412758549 -> Extra412758549[arrowhead=none, arrowtail=empty, dir=both];
AbstractDish412758549 -> Garnish412758549[arrowhead=none, arrowtail=empty, dir=both];
AbstractDish412758549 -> MainCourse412758549[arrowhead=none, arrowtail=empty, dir=both];
AbstractDish412758549 -> Product1982328172[label="ingredients
[0..*]"];
AbstractDish412758549 -> Salad412758549[arrowhead=none, arrowtail=empty, dir=both];
AbstractDish412758549 -> Soup412758549[arrowhead=none, arrowtail=empty, dir=both];
AbstractDish412758549 -> VegMainCourse412758549[arrowhead=none, arrowtail=empty, dir=both];
Dish412758549 -> AbstractDish412758549[arrowhead=none, arrowtail=empty, dir=both];
    
}
@enduml